1) Introduction to Angular

    => what is Angular

    => Advantages / Disadvantages Angular

    => AngularJS / Angular2.....12 / ReactJS / VueJS / NodeJS


2) Installation of Angular12


3) Components in Angular


4) Communication Between Components

        => @Input()

        => @Output()

        => @ViewChild()     @ViewChildren()


5) Single Page Applications

    => Routing

    => Routing Guards

            1) CanActivate

            2) CanDeactivate

            3) CanActivateChild

            4) CanLoad

    => Lazy Loading (improve application performance) 


6) MEAN Stack Development

    M - MongoDB

    E - ExpressJS    => GET, POST, PUT, DELETE

    A -  Angular

    N - NodeJS

7) Spring Boot Intrgration


8) Asynchronous Calls

        RxJS      


9) State Management in Angular

        NgRx


10) Forms with Validations

    => Template Driven Forms

    => Model Driven Forms / Reactive Forms


11) Directives

    => Predefined Directives

    => Custom Directives


12) Pipes

    => Predefined Pipes

    => Custom Pipes


13) Two way Data Binding / interpolation

        => property Binding

        => event Binding

        


14) Project


15) Deployment

    => AWS Server

    => CI / CD Process


16) Unit Test Cases


17) Debugging


18) Life Cycle Hooks


19) 3rd party API Integration

    => GMAIL Integration / FaceBook Integration / Payment Gateways



Introduction 
============

    - Angular is the Framework.

    - Angular is the JavaScript Framework.

    - Angular Given by Google.

    - Angular Categorized into 3 Flavours.

            1) AngularJS

            2) Angular2

            3) Angular Material

    - AngularJS, used to develop the web applications by using JavaScript.

    - JavaScript is the Object Based Scripting Language.

    - JavaScript won't follows the OOPS.

    - Angular2 used to build the web applications by using TypeScript.

    - TypeScript is the programming language given by microsoft.

    - TypeScript follows the OOPS.

    - Current Version of Angular2 is "Angular12".

    - Angular Material used to apply Rich UI to web applications as well as mobile applications.

    - Angular follows the MVC Design Pattern.

            M - Model

            V - View

            C - Component

    - TypeScript variables behaves like Model.

            Ex.
                    var data = "data from database soon....";

                    where "data" is the model.

    - HTML,HTML5,Python,"Angular Material",ReactJS,PERL,.....behaves like View.

    - classes behaves like Component.


    Ex.
         class FirstComponent{

         };

         where "FirstComponent" is the Component in MVC Design Pattern.




Installation
************

1) download and install "NodeJS"

    => NodeJS offers different tools like

            1) npm

            2) npx

            3) node

            4) nodemon

            ----
            ----
            ----

    => npm stands for node packaging manager.

    => npm helps to install Angular.


website : https://nodejs.org/en/

file    : node-v16.6.1-x64.msi


2) install "yarn" tool

    yarn tool given by FaceBook.

    yarn tool, used to download the 3rd party libraries.

    we will install yarn tool by using following command.

    > npm install -g yarn

    - "-g" stands for global installation.


3) install "Angular Cli".


    - Cli stands for command line interface

    - Cli helps to create the angular applications


    > npm install -g @angular/cli


4) link the "yarn" tool "cli" tool

    > ng config --global cli.packageManager yarn


5) download and install Visual Studio Code

    website : https://code.visualstudio.com/docs/?dv=win

    file    : VSCodeUserSetup-x64-1.58.2.exe









steps to create the first angular application
*********************************************

1) create angular application

    > ng new firstApp

        where "firstApp" is the name of the angular application


2) switch to angular application

    > cd firstApp

3) execute the angular application

    > ng s -o

    s stands for "serve"

    "-o" stands for open the "default browser"

    default port number of angular application is "4200"



Directory Structure of Angular Application
******************************************

1) e2e

    => e2e stands for end to end

    => e2e directory used to write the end to end test cases


2) node_modules

    => node_modules containes libraries.

    => these libraries helps to execute the angular application.


3) src / app

    => used to deploy angular applications

    Ex.
        Components

        Directives

        Services

        Pipes

        ---
        ---
        ---

4) src / app / app.component.ts
               app.component.html
               app.component.css
               app.component.spec.ts


    - when ever we create the angular application automatically "AppComponent" is the default component


5) src / app / app.module.ts

    - app.module.ts file is the registration file.

    - app.module.ts file is the default module.

    - this registration file used to register the components, directives , pipes , services,.......


6) src /  assets

    - used to deploy the static resources

    Ex.
        images

        xml files

        json files

        ---
        ---
        ---

7) src / environments

    - used to define the context level members


8) src / favicon.ico

    - Representing default logo of angular


9) src / index.html

    - angular Framework starts the execution from "index.html" file.

    - "index.html" file called as "main" template.


10) src / main.ts

    - main.ts file acting as interface between "index.html" file to "app.module.ts" file.

    - angular starts the execution from "index.html" file.

    - "index.html" immidiately invokes the "main.ts" file.

    - "main.ts" file immidiately invokes the "app.module.ts" file.

    - "app.module.ts" file containes our applications registrations.

    - based on our applications registrations, angular will execute.


11) src / polyfills.ts

    - it is used to convert the TypeScript to Equalent JavaScript.


12) src / styles.css

    - used to define the global styles.

13) src / test.ts

    - Representing the sample testing file.


14) .browserslistrc

    - containes supporting browsers of angular applications.


15) .editorconfig

    - this file related to VSCode


16) .gitignore

    avoids the libraries to repositories


17) angular.json

    describes the directory Structure of angular application.


18) karma.conf.js

    in general, we will write unit test cases by using "karma" tool

    "karma.conf.js" file is the configuration file of "karma" tool

19) package.json

    it containes libraries related information


20) tsconfig.app.json
    tsconfig.json
    tsconfig.spec.json

        - These files are TypeScript configuration files.



21) tslint.json

    - used to validate the application.



Component
*********
    - Reusable Portion of "Complex UI" Called as Component.

    - we can create "more than" one component.

    - as a angular developer we can provide "communication" between components.

    - angular applications are "component" based applications.

    - because of components "code" reusablility is high in angular applications.

    - TypeScript "class" behaves like Component.


************************************************
componentApp
           src
             app
                first.component.ts
                first.component.html

                app.module.ts
             index.html
**********************************************


********************************************************
componentsApp
            src
              app
                frontend.component.ts
                frontend.component.html

                backend.component.ts
                backend.component.html

                database.component.ts
                database.component.html

                mean.component.ts
                mean.component.html

                app.module.ts
             index.html
*******************************************************



***********************************************************
serviceApp
         src
           app
             services
                my.service.ts
             components
                first.component.ts
                first.component.html

                second.component.ts
                second.component.html
            app.module.ts
         index.html
************************************************************



***********************************************************
serviceEx1
         src
           app
             services
                 second.service.ts
                 first.service.ts

             component
                 demo.component.ts
                 demo.component.html
             
             app.module.ts
           index.html
***********************************************************


                            Rest API Calls
                            **************

    - HttpClientModule is the Predefined module, helps to make the rest api calls.

    - HttpClient is the Predefined class helps to make the Rest API Calls.

    - HttpClientModule and HttpClient available in @angular/common/http package.


***************************************
httpGetEx
        src
          app
            services
               countries.service.ts

            component
                countries.component.ts
                countries.component.html

            app.module.ts
          index.html
*****************************************

                                Login Application
                                *****************

MongoDB
=======
    - MongoDB is the "NoSQL" database.

    - MongoDB Supports "JSON".

    - MongoDB is "light" weight database.

    - default port number of MongoDB database is "27017"

    - MongoDB Supports the Cloud in the form of a "MongoDB Atlas"


SQL                                         NoSQL
***********************************************************************************
Ex.
    Oracle                              MongoDB

    MySQL                               CassandraDB

    SQLServer                           RabbitMQ


tables                                  collections

records                                 documents

primary key                             _id

databases                               databases
************************************************************************************

database name           :           angular9pm

collection name         :           login_details

user name               :           admin

password                :           admin

connection url          :           mongodb+srv://admin:admin@miniprojectdb.nzphu.mongodb.net/angular9pm?retryWrites=true&w=majority



Node Server
***********

    - NodeJS is the "backend" technology.

    - NodeJS, used to develop the "servers".

    - we will develop NodeJS Applications with the help of "JavaScript".

    - NodeJS, supports the modules / libraries.

    - we will download above modules by using either "npm" tool or "yarn" tool.

1) express

    - express, used to develop the rest services.

    Ex.
        GET
        POST
        PUT
        DELETE
        ---
        ---
        ---

2) mongodb

    - mongodb library used to connect to mongodb database.


3) body-parser

    - body-parser module, used to receive the data from client application.


4) cors

    - used to enable the communication between ports.

    - enabling the communication between ports called as cors policy


=> create the folder

    Ex.
            server


=> switch to server folder

    > cd server

=> download the node modules

    > yarn add express mongodb cors body-parser

=> create the node application

    > server.js


=> start the node server

    > node server

=> test the rest api by using Postman

    > http://localhost:8080/login   (POST)


************
frontend
************

=> create the angular application

    > ng new loginApp


=> switch to angular application

    > cd loginApp


=> create the service

    > ng g s services/login --skip-tests

    g stands for generate

    s stands for service

    --skip-tests means skip the unit test cases

    finally "LoginService" is ready with "loginFn()"


=> create the component

    > ng g c components/login --skip-tests -is --selector=login --flat true


backend deployment
******************
1) push server code to github


2) create the application in "aws" server


3) create the CI / CD Process

    => Ngserver-env.eba-p7i3kpke.ap-south-1.elasticbeanstalk.com/login



frontend deployment
*******************

1) configure cloud rest api call


2) download and install aws cli tool

website : https://aws.amazon.com/cli/

file    : AWSCLIV2.msi

3) prepare the production build

    > ng build --prod=true


4) move the dist folder to aws s3 bucket

    bucket policy
    *************
    {
                "Version": "2012-10-17",
                "Statement": [
                        {
                        "Sid": "PublicReadGetObject",
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": [
                                "s3:GetObject"
                        ],
                        "Resource": [
                                "arn:aws:s3:::angularclassex/*"
                        ]
                        }
                ]
	}

5) create the credentials to upload angular application

    IAM


6) modify the package.json file

    scripts : {

        "aws-deploy":"aws s3 sync dist/loginApp/ s3://angularclassex"

    }


7) execute the following commands

        > aws configure

        > ng build && npm run aws-deploy



                                RxJS
                                ****
    - RxJS Stands for Reactive Extension JavaScript.

    - RxJS library helps to make Asynchronous Calls.


> cd restAPICalls

> npm install

> node server


=> http://localhost:8080/restapi1

=> http://localhost:8080/restapi2/rxjs


*************************************
app-one
    
      restAPI1Model

      restAPI2Model

      restAPI1Service

      restAPI2Service

      forkJoinComponent
***************************************



                                    Single Page Application

    - loading one component to another component without refreshing the whole webpage called as Single page application.

    - navigation of one component to another component called as Routing.

    - RouterModule helps to implement the Single page Applications.

step 1.
    create the components

    



    








      










































































































































































































































































































