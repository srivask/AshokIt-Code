1) Introduction to Angular

    => what is Angular

    => Advantages / Disadvantages Angular

    => AngularJS / Angular2.....12 / ReactJS / VueJS / NodeJS


2) Installation of Angular12


3) Components in Angular


4) Communication Between Components

        => @Input()

        => @Output()

        => @ViewChild()     @ViewChildren()


5) Single Page Applications

    => Routing

    => Routing Guards

            1) CanActivate

            2) CanDeactivate

            3) CanActivateChild

            4) CanLoad

    => Lazy Loading (improve application performance) 


6) MEAN Stack Development

    M - MongoDB

    E - ExpressJS    => GET, POST, PUT, DELETE

    A -  Angular

    N - NodeJS

7) Spring Boot Intrgration


8) Asynchronous Calls

        RxJS      


9) State Management in Angular

        NgRx


10) Forms with Validations

    => Template Driven Forms

    => Model Driven Forms / Reactive Forms


11) Directives

    => Predefined Directives

    => Custom Directives


12) Pipes

    => Predefined Pipes

    => Custom Pipes


13) Two way Data Binding / interpolation

        => property Binding

        => event Binding

        


14) Project


15) Deployment

    => AWS Server

    => CI / CD Process


16) Unit Test Cases


17) Debugging


18) Life Cycle Hooks


19) 3rd party API Integration

    => GMAIL Integration / FaceBook Integration / Payment Gateways



Introduction 
============

    - Angular is the Framework.

    - Angular is the JavaScript Framework.

    - Angular Given by Google.

    - Angular Categorized into 3 Flavours.

            1) AngularJS

            2) Angular2

            3) Angular Material

    - AngularJS, used to develop the web applications by using JavaScript.

    - JavaScript is the Object Based Scripting Language.

    - JavaScript won't follows the OOPS.

    - Angular2 used to build the web applications by using TypeScript.

    - TypeScript is the programming language given by microsoft.

    - TypeScript follows the OOPS.

    - Current Version of Angular2 is "Angular12".

    - Angular Material used to apply Rich UI to web applications as well as mobile applications.

    - Angular follows the MVC Design Pattern.

            M - Model

            V - View

            C - Component

    - TypeScript variables behaves like Model.

            Ex.
                    var data = "data from database soon....";

                    where "data" is the model.

    - HTML,HTML5,Python,"Angular Material",ReactJS,PERL,.....behaves like View.

    - classes behaves like Component.


    Ex.
         class FirstComponent{

         };

         where "FirstComponent" is the Component in MVC Design Pattern.




Installation
************

1) download and install "NodeJS"

    => NodeJS offers different tools like

            1) npm

            2) npx

            3) node

            4) nodemon

            ----
            ----
            ----

    => npm stands for node packaging manager.

    => npm helps to install Angular.


website : https://nodejs.org/en/

file    : node-v16.6.1-x64.msi


2) install "yarn" tool

    yarn tool given by FaceBook.

    yarn tool, used to download the 3rd party libraries.

    we will install yarn tool by using following command.

    > npm install -g yarn

    - "-g" stands for global installation.


3) install "Angular Cli".


    - Cli stands for command line interface

    - Cli helps to create the angular applications


    > npm install -g @angular/cli


4) link the "yarn" tool "cli" tool

    > ng config --global cli.packageManager yarn


5) download and install Visual Studio Code

    website : https://code.visualstudio.com/docs/?dv=win

    file    : VSCodeUserSetup-x64-1.58.2.exe









steps to create the first angular application
*********************************************

1) create angular application

    > ng new firstApp

        where "firstApp" is the name of the angular application


2) switch to angular application

    > cd firstApp

3) execute the angular application

    > ng s -o

    s stands for "serve"

    "-o" stands for open the "default browser"

    default port number of angular application is "4200"



Directory Structure of Angular Application
******************************************

1) e2e

    => e2e stands for end to end

    => e2e directory used to write the end to end test cases


2) node_modules

    => node_modules containes libraries.

    => these libraries helps to execute the angular application.


3) src / app

    => used to deploy angular applications

    Ex.
        Components

        Directives

        Services

        Pipes

        ---
        ---
        ---

4) src / app / app.component.ts
               app.component.html
               app.component.css
               app.component.spec.ts


    - when ever we create the angular application automatically "AppComponent" is the default component


5) src / app / app.module.ts

    - app.module.ts file is the registration file.

    - app.module.ts file is the default module.

    - this registration file used to register the components, directives , pipes , services,.......


6) src /  assets

    - used to deploy the static resources

    Ex.
        images

        xml files

        json files

        ---
        ---
        ---

7) src / environments

    - used to define the context level members


8) src / favicon.ico

    - Representing default logo of angular


9) src / index.html

    - angular Framework starts the execution from "index.html" file.

    - "index.html" file called as "main" template.


10) src / main.ts

    - main.ts file acting as interface between "index.html" file to "app.module.ts" file.

    - angular starts the execution from "index.html" file.

    - "index.html" immidiately invokes the "main.ts" file.

    - "main.ts" file immidiately invokes the "app.module.ts" file.

    - "app.module.ts" file containes our applications registrations.

    - based on our applications registrations, angular will execute.


11) src / polyfills.ts

    - it is used to convert the TypeScript to Equalent JavaScript.


12) src / styles.css

    - used to define the global styles.

13) src / test.ts

    - Representing the sample testing file.


14) .browserslistrc

    - containes supporting browsers of angular applications.


15) .editorconfig

    - this file related to VSCode


16) .gitignore

    avoids the libraries to repositories


17) angular.json

    describes the directory Structure of angular application.


18) karma.conf.js

    in general, we will write unit test cases by using "karma" tool

    "karma.conf.js" file is the configuration file of "karma" tool

19) package.json

    it containes libraries related information


20) tsconfig.app.json
    tsconfig.json
    tsconfig.spec.json

        - These files are TypeScript configuration files.



21) tslint.json

    - used to validate the application.



Component
*********
    - Reusable Portion of "Complex UI" Called as Component.

    - we can create "more than" one component.

    - as a angular developer we can provide "communication" between components.

    - angular applications are "component" based applications.

    - because of components "code" reusablility is high in angular applications.

    - TypeScript "class" behaves like Component.


************************************************
componentApp
           src
             app
                first.component.ts
                first.component.html

                app.module.ts
             index.html
**********************************************


********************************************************
componentsApp
            src
              app
                frontend.component.ts
                frontend.component.html

                backend.component.ts
                backend.component.html

                database.component.ts
                database.component.html

                mean.component.ts
                mean.component.html

                app.module.ts
             index.html
*******************************************************



***********************************************************
serviceApp
         src
           app
             services
                my.service.ts
             components
                first.component.ts
                first.component.html

                second.component.ts
                second.component.html
            app.module.ts
         index.html
************************************************************
          




















































